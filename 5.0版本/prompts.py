# prompts.py

class PromptTemplates:
    """存储用于 LLM 调用的 Prompt 模板"""

    PREPROCESSING_PROMPT_TEMPLATE = """
{pre_instruction}

**任务：精确格式化小说文本，添加说话人标记**

请仔细阅读【原始小说文本】。
你的核心任务是：**仅在**那些**直接包含角色说的话（通常由引号 `“...”` 或 `「...」` 包裹）的文本行**的【正上方】，添加说话人标记 `[名字]`。

**必须严格遵守以下规则：**

1.  **识别对话行：** 找到那些主要内容是角色说的话的行，这些行通常以引号 `“` 或 `「` 开始，并以引号 `”` 或 `」` 结束。
2.  **确定说话人：** 根据对话行的上下文（通常是对话行之前紧邻的句子或段落）判断是谁在说话。
3.  **精确定位标记：** 将 `[说话人名字]` 标记**只添加在**你识别出的**对话行**（即被引号包裹的那一行）的【紧邻的上一行】。
4.  **处理内心想法：** 如果原文中明确标识了内心想法（例如，使用特殊的括号或引导词），则用 `*{{...}}*` 包裹那部分内心想法文本。如果没有明确标识，则不添加此标记。
5.  **绝对禁止：**
    *   **禁止**在非对话行（如纯粹的动作描述、场景描述、旁白）上方添加 `[名字]` 标记。
    *   **禁止**将 `[名字]` 标记添加到包含动作描述和对话的混合段落的开头。标记必须紧邻纯对话行。
    *   禁止生成任何新的文本内容。
    *   禁止修改或删除原始文本的任何字符。
    *   禁止添加除 `[名字]` 和 `*{{...}}*` 之外的任何标记。
    *   禁止进行任何解释或评论。

**--- 原始小说文本 ---**
{text_chunk}
**--- 文本结束 ---**

{post_instruction}

请根据以上所有规则和指令，输出带有精确标记的格式化文本：
"""

    PROMPT_ENHANCEMENT_TEMPLATE = """
{pre_instruction}
你是一个高级小说处理助手，擅长理解上下文并生成符合场景的 NAI (NovelAI) 或 Stable Diffusion 风格的图像生成提示词。
你的任务是：阅读【已格式化文本】，参考【人物基础设定】，并在特定人物的对话或重要动作【之前】，智能地生成并添加提示词标记。
输入包含两部分：
1.  【已格式化文本】：包含 `[名字]` 说话人标记和 `*{{...}}*` 心声标记的文本。这是主要的上下文来源。
2.  【人物基础设定】：一个 JSON 字符串，格式为 `{{"人物名字1": {{"positive": "基础正面提示词", "negative": "基础负面提示词"}}, "人物名字2": {{...}} }}`。这些是每个角色**固定不变**的提示词。
严格遵循以下规则进行处理：
1.  **分析上下文**: 当遇到说话人标记 `[名字]` 时，仔细阅读该标记**之后**的几行文本（对话、动作描述等），理解当前场景、人物的情绪、动作和环境。
2.  **查找基础设定**: 在【人物基础设定】中查找当前说话人 `[名字]` 对应的基础提示词（positive 和 negative）。
3.  **动态生成提示词**: 基于你对当前上下文的理解（步骤 1），以及人物的基础设定（步骤 2），为当前场景**动态生成**额外的、描述性的提示词。这些动态提示词应该反映：
    *   人物的**当前情绪**（例如：`smiling`, `angry`, `crying`, `blushing`）
    *   人物的**主要动作或姿态**（例如：`raising hand`, `pointing forward`, `sitting on chair`, `leaning on wall`）
    *   **关键的场景元素或光照**（例如：`classroom background`, `night`, `window light`, ` dimly lit`）
    *   **与其他角色的互动**（如果适用，例如：`looking at other`, `holding hands with ...`）
    *   **(可选) LoRA 注入**: 如果场景适合某个特定的 LoRA 风格或角色，可以在动态生成的正面提示词中包含 `<lora:lora文件名:权重>` 标记。
4.  **组合提示词**:
    *   将**基础正面提示词**和**动态生成的正面提示词**（包括可能的 LoRA 标记）组合起来，用逗号 `,` 分隔。
    *   将**基础负面提示词**和**动态生成的负面提示词**（如果需要生成额外的负面词，通常较少）组合起来，用逗号 `,` 分隔。
5.  **添加标记**: 在识别到的 `[名字]` 标记行的【正上方】，添加一个新的标记行，格式为：`[NAI:{{名字}}|{{组合后的正面提示词}}|{{组合后的负面提示词}}]`。
    *   确保使用**双花括号 `{{ }}`** 包裹占位符名称，以防止 Python 格式化错误。
    *   如果某个角色的基础设定为空，并且根据上下文也无法生成有意义的动态提示词，则**不要**为该角色添加 `[NAI:...]` 标记。
    *   如果只有正面或负面提示词（基础+动态），另一部分留空，但**必须保留分隔符 `|`**。例如 `[NAI:{{名字}}|{{正面提示}}|]` 或 `[NAI:{{名字}}||{{负面提示}}]`。
6.  **处理心声/旁白**: 不要为心声 `*{{...}}*` 或普通旁白添加 `[NAI:...]` 标记。
7.  **保留原文和原有标记**: 除了按规则添加包含【组合后提示词】的 `[NAI:...]` 标记外，必须【完整保留】输入文本中的所有其他内容和标记 (`[名字]`, `*{{...}}*`)。
8.  **输出格式**: 直接输出带有新增标记的文本。不要包含任何代码块标记或额外的解释。

现在，请根据以下【人物基础设定】和【已格式化文本】的上下文，智能地生成并添加提示词标记：

--- CHARACTER BASE PROFILES (JSON) ---
{character_profiles_json}
--- CHARACTER BASE PROFILES END ---

--- FORMATTED TEXT START ---
{formatted_text_chunk}
--- FORMATTED TEXT END ---

{post_instruction}

Enhanced Text Output with Generated Prompts:
"""

    KAG_CONVERSION_PROMPT_TEMPLATE = """
{pre_instruction}
你是一个将【已格式化并包含提示词标记】的小说文本转换为 KiriKiri2 KAG (ks) 脚本格式的专家。
输入文本包含 `[名字]`、`*{{...}}*` 和 `[NAI:名字|正面|负面]` 标记。
**核心任务**：严格按照规则将输入文本转换为 KAG 脚本，**专注于文本转换和生成指定的注释与占位符**。

**【极其重要】输出规则：**

1.  **遇到 `[NAI:名字|正面|负面]` 标记时：**
    *   **必须** 将其转换为 **两行** 输出：
        *   第一行：KAG 注释，格式为 `; NAI Prompt for {{名字}}: Positive=[{{正面}}] Negative=[{{负面}}]`
        *   第二行：**紧接着**的图片**占位符**，格式为 `[INSERT_IMAGE_HERE:{{名字}}]`
    *   **绝对禁止** 在占位符 `[INSERT_IMAGE_HERE:...]` 行的末尾添加 `[p]` 标签。
    *   原始的 `[NAI:...]` 标记**本身不应出现在输出中**。

2.  **遇到 `[名字]` 标记时：**
    *   将其理解为下一行对话的说话人。
    *   该标记**本身不应出现在输出中**。

3.  **处理对话（以 `“...”` 或 `「...」` 开始和结束的行）：**
    *   如果【紧邻的上一行】是说话人标记 `[某名字]`（该标记已被规则 2 处理，不会直接出现在输入流的这一步，但逻辑上是存在的），则输出：
        `#某名字`
        `对话内容（保留引号/括号）[p]`
    *   否则（上一行不是说话人标记，例如旁白后的对话），直接输出：
        `对话内容（保留引号/括号）[p]`
    *   **注意:** KAG 中显示说话人姓名通常使用 `#名字` 放在对话内容之前，或者使用更复杂的宏。这里采用 `#名字` 的简化方式。对话内容和 `[p]` 在同一行。

4.  **处理心声 `*{{...}}*`：**
    *   去除 `*{{` 和 `}}*` 标记。
    *   输出：
        `内心独白内容（保留原始文本）[p]`
    *   心声内容和 `[p]` 在同一行。

5.  **处理旁白/叙述：**
    *   任何不符合上述规则的、**非空**的文本行（除了已被处理的 `[名字]` 和 `[NAI:...]` 标记），都视为旁白。
    *   **输出：**
        `旁白/叙述的原始文本内容[p]`
    *   旁白内容和 `[p]` 在同一行。

6.  **忽略空行**: 忽略输入文本中的所有空行。不要为空行生成任何输出。

7.  **禁止额外内容**:
    *   **绝对禁止** 在输出中生成任何 KAG 的 `[image]` 标签。只允许生成 `[INSERT_IMAGE_HERE:...]` 占位符和对应的提示词注释。
    *   不要添加任何解释性文字或代码块标记 (```)。
    *   严格遵守上述 `[p]` 标签的使用规则，确保每个有效的文本输出行（对话、心声、旁白）都以 `[p]` 结尾，且占位符和注释行没有 `[p]`。

**输入文本:**
--- ENHANCED FORMATTED TEXT CHUNK START ---
{text_chunk}
--- ENHANCED FORMATTED TEXT CHUNK END ---

{post_instruction}

**输出 KAG 脚本 (包含占位符):**
"""